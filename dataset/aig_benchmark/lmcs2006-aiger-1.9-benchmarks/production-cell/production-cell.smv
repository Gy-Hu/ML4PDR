-----------------------------------------------------------------
-- ProductionCell.smv       Kirsten Winter, Mar 1997
--
-- This SMV-program bases on an ASM-specification of the Production
-- Cell (compare Boerger, E.,  Mearelli, L. 
--      "Integrating ASMs into the Software Developement Life Cycle"
-- (see http://www.iicm.edu/jucs_3_5/integrating_asm)
-- 
-- Specification: liveness property
-----------------------------------------------------------------
MODULE state
VAR
--FB
  FBM : {on, off};		-- FeedBeltMot
  deliv : boolean;		-- Delivering
--ERT
  TEM    : {up,down,idle};         -- TableElevationMot
  TRM    : {clockwise,counterclockwise,idle};   -- TableRotationMot
--ROB
  A1M    : {extend,retract,idle};  -- Arm1Mot
  A2M    : {extend,retract,idle};  -- Arm2Mot
  RRM    : {clockwise,counterclock,idle}; --RobotRotationMot
  A1Mag  : {on,off};            -- Arm1Magnet
  A2Mag  : {on,off};            -- Arm2Magnet
--PR
  PM : {up,down,idle};          -- PressMot
--DB
  DBM : {run,idle};             -- DepBeltMot
  crit: boolean;                -- Critical
--CR
  CHM : {tofeedbelt,todepbelt,idle};      -- CraneHorizontalMot
  CVM : {up,down,idle};         -- CraneVerticalMot
  CMag: {on,off};               -- CraneMagnet


-- communication between:
-------------------------- 
-- FeedBelt and ERT/Crane
   ff     : boolean;         -- FeedBeltFree
   tl     : boolean;         -- TableLoaded  
-- Robot and Table/Press/Belt
   pl     : boolean;         -- PressLoaded
   brl    : boolean;         -- DepositBeltReadyForLoading
-- DepBelt and Crane
   pbe : boolean;            -- PieceAtDepositBeltEnd

-- sensorvariables:
-------------------
-- for FeedBelt
  pfl : boolean;                -- PieceInFeedBeltLightBarrier
-- for ERTable
  maxRot : boolean;             -- MaxRotation
  minRot : boolean;             -- MinRotation
  topPos : boolean;		-- TopPosition
  botPos : boolean;             -- BottomPosition
-- for Robot
  a1ext  : {a1ip,ot,retracted};    -- Arm1Ext (Orakel)
  a2ext  : {a2ip,ob,retracted};    -- Arm2Ext (Orakel)
  angle  : {arm1totable,arm2topress,   -- Angle (Orakel)
            arm2todepbelt,arm1topress}; 
-- for Press
  topPosP : boolean;            -- TopPosition(Press)    (Orakel)
  midPosP : boolean;            -- MiddlePosition(Press) (Orakel)
  botPosP : boolean;		-- BottomPosition(Press) (Orakel)
       fc : boolean;            -- ForgingComplete(Press) (Orakel)
-- for DepositBelt
   pbl : boolean;               -- PieceInDepositionBeltLightBarrier (Orakel)
-- for Crane
   gob : boolean;               -- GripperOverDepBelt     (Orakel)
   gof : boolean;               -- GripperOverFeedBelt    (Orakel)
   gvp : {ovb,ovf,sd};          -- GripperVerticalPosition (Orakel)

-- additional statusvariables for environment
   angle_status : {arm2stoppedatpress, arm2stoppedatbelt, 
                      arm1stoppedatpress, arm1stoppedattable};
   press_status : {pressattop, pressatmid, pressatbot};
   gripper_status : {gripperstoppedat_ovf, gripperstoppedat_ovb, 
                                      gripperstoppedat_sd};



INIT

FBM = off  &                    -- FBM = on -> FB is stopped
deliv = 0 &
pfl = 1 &			-- pfl = 0 &
botPos = 1 &
minRot = 1 &
TEM = idle &
TRM = idle &
tl = 1 &			 -- tl = 0 &
maxRot = 0 &
topPos = 0 &
A1M = idle &
angle = arm1totable &          -- angle = arm2topress;arm2todepbelt
angle_status = arm1stoppedattable &  -- angle_status = arm2stoppedatbelt &
a1ext = retracted &
a2ext = retracted &
RRM = idle &
A2M = idle &
A1Mag = off &                      -- A1Mag = on & -> WaitingInLoadTable
A2Mag = off &			  -- A2Mag = on &
brl = 0 &			   -- brl = 1 &
midPosP = 0 &
press_status = pressatbot &
pl = 1 &                            -- pl = 0 &
PM = idle &
botPosP = 1 &
topPosP = 0 &
fc = 0 &
crit = 0 &
DBM = idle &                         -- DBM = run &
pbl = 0 &
CMag = on &		             -- CMag = off &
gob = 1 &
gvp = ovb &
gripper_status = gripperstoppedat_ovb &
CVM = idle &
CHM = idle &
pbe = 1 &			     -- pbe = 0 &
gof = 0 &
ff = 0                                 -- ff = 1
					
					

-------------------------------------------------------------------------
MODULE FeedBelt (s)

ASSIGN

    next(s.deliv) :=
     case
       (s.FBM=on & !s.deliv) & s.pfl & 
        (s.botPos & s.minRot & s.TEM=idle & s.TRM=idle) & !s.tl : 1;  -- FT1a
       (s.FBM=off) & (s.botPos & s.minRot & s.TEM=idle & s.TRM=idle
         & !s.tl) : 1;                                        -- FT2
      (s.FBM=on & s.deliv) & !s.pfl : 0;                          -- FT3
       1 : s.deliv;                                           -- default
     esac;
       
    next(s.FBM) :=
     case
      (s.FBM=on & !s.deliv) & s.pfl 
         & !((s.botPos & s.minRot & s.TEM=idle & s.TRM=idle) & !s.tl) : off;  --FT1b
      (s.FBM=off) & (s.botPos & s.minRot & s.TEM=idle & s.TRM=idle
                                                   & !s.tl)   : on;   -- FT2
      1 : s.FBM;                                                      -- default
     esac;

--------------------------------------------------------------------
MODULE ERTable (s)

ASSIGN

    next(s.TRM) := 
    case
     (s.botPos & s.minRot & s.TEM=idle & s.TRM=idle) & s.tl  : clockwise;  -- TT1
     s.TRM=clockwise & s.maxRot : idle;                   -- TT3
     (s.topPos & s.maxRot & s.TEM=idle & s.TRM=idle)
                             & !s.tl : counterclockwise;  -- TT4
     s.TRM=counterclockwise & s.minRot : idle;            -- TT6
     1 : s.TRM;                                           -- default
    esac;

    next(s.TEM) := 
      case
       (s.botPos & s.minRot & s.TEM=idle & s.TRM=idle) & s.tl : up;    -- TT1
       s.TEM=up & s.topPos : idle;               -- TT2
       (s.topPos & s.maxRot & s.TEM=idle & s.TRM=idle) & !s.tl : down; -- TT4
       s.TEM=down & s.botPos : idle;             -- TT5
       1 : s.TEM;                                -- default
      esac;
 

---------------------------------------------------------------------
MODULE Robot (s)

ASSIGN

  next(s.A1M) := 
   case
     (s.angle=arm1totable & s.a1ext=retracted & s.a2ext=retracted &  
     s.RRM=idle & s.A1M=idle & s.A2M=idle & s.A1Mag=off & s.A2Mag=off)
                                      & (s.topPos & s.maxRot & s.tl): extend; --RT1a
     (s.angle=arm1topress & s.a1ext=retracted & s.a2ext=retracted &  
     s.RRM=idle & s.A1M=idle & s.A2M=idle & s.A1Mag=on & s.A2Mag=off) 
                                 & (s.midPosP & s.PM=idle & !s.pl)  : extend; --RT1d
     (s.angle=arm1totable & s.A1M=extend) & s.a1ext=ot              : idle;  --RT2a
     (s.angle=arm1topress & s.A1M=extend) & s.a1ext=a1ip            : idle;  --RT2d
     (s.angle=arm1totable & s.a1ext=ot & s.A1M=idle) 
                       & s.A1Mag=on                             : retract; --RT3a
     (s.angle=arm1topress & s.a1ext=a1ip & s.A1M=idle)
                           & s.A1Mag=off                        : retract; --RT3d
     (s.angle=arm1totable & s.A1M=retract) & s.a1ext=retracted      : idle;  --RT4a
     (s.angle=arm1topress & s.A1M=retract) & s.a1ext=retracted      : idle;  --RT4d
     1 : s.A1M;                                                        --default
   esac; 
  
   next(s.A2M) := 
    case
      (s.angle=arm2topress & s.a1ext=retracted & s.a2ext=retracted &  
     s.RRM=idle & s.A1M=idle & s.A2M=idle & s.A1Mag=on & s.A2Mag=off)
                      & (s.botPosP & s.PM=idle & s.pl)            : extend;  --RT1b
     (s.angle=arm2todepbelt & s.a1ext=retracted & s.a2ext=retracted &  
     s.RRM=idle & s.A1M=idle & s.A2M=idle & s.A1Mag=on & s.A2Mag=on) 
                             & s.brl                          : extend;  --RT1c
     (s.angle=arm2topress & s.A2M=extend) & s.a2ext=a2ip            : idle;  --RT2b
     (s.angle=arm2todepbelt & s.A2M=extend) & s.a2ext=ob            : idle;  --RT2c
     (s.angle=arm2topress & s.a2ext=a2ip & s.A2M=idle)
                           & s.A2Mag=on                       : retract; --RT3b
     (s.angle=arm2todepbelt & s.a2ext=ob & s.A2M=idle)
                         & s.A2Mag=off                        : retract; --RT3c
     (s.angle=arm2topress & s.A2M=retract) & s.a2ext=retracted     : idle;  --RT4b
     (s.angle=arm2todepbelt & s.A2M=retract) & s.a2ext=retracted   : idle;  --RT4c
     1 : s.A2M;                                                         --default
    esac;

   next(s.A1Mag):=
    case
     (s.angle=arm1totable & s.A1M=extend) & s.a1ext=ot : on;      --RT2a
     (s.angle=arm1topress & s.A1M=extend) & s.a1ext=a1ip : off;   --RT2d
     1 : s.A1Mag;                                      --default
    esac;

   next(s.A2Mag):=
    case
     (s.angle=arm2topress & s.A2M=extend) & s.a2ext=a2ip : on;    --RT2b
     (s.angle=arm2todepbelt & s.A2M=extend) & s.a2ext=ob : off;   --RT2c
     1 : s.A2Mag;                                      --default
    esac;


   next(s.RRM):=
    case
     (s.angle=arm1totable & s.A1M=retract) & s.a1ext=retracted : counterclock;--RT4a
     (s.angle=arm2topress & s.A2M=retract) & s.a2ext=retracted : counterclock;--RT4b
     (s.angle=arm2todepbelt & s.A2M=retract)& s.a2ext=retracted : counterclock;--RT4c
     (s.angle=arm1topress & s.A1M=retract) & s.a1ext=retracted : clockwise;   --RT4d
     (s.a1ext=retracted & s.a2ext=retracted & s.A1M=idle & s.A2M=idle &
      s.RRM=counterclock & s.A1Mag=on & s.A2Mag=off) 
                                     & s.angle=arm2topress : idle; --RT5a    
     (s.a1ext=retracted & s.a2ext=retracted & s.A1M=idle & s.A2M=idle &
      s.RRM=counterclock & s.A1Mag=on & s.A2Mag=on) 
                                   & s.angle=arm2todepbelt : idle; --RT5b    
     (s.a1ext=retracted & s.a2ext=retracted & s.A1M=idle & s.A2M=idle &
     s.RRM=counterclock & s.A1Mag=on & s.A2Mag=off) 
                                   & s.angle=arm1topress : idle;   --RT5c 
     (s.a1ext=retracted & s.a2ext=retracted & s.A1M=idle & s.A2M=idle &
      s.RRM=clockwise & s.A1Mag=off & s.A2Mag=off) 
                                   & s.angle=arm1totable : idle;   --RT5d
     1 : s.RRM;                                                    --default
    esac;


   next(s.pl):=
    case
     (s.angle=arm2topress & s.A2M=retract) & s.a2ext=retracted : 0; --RT4b
     (s.angle=arm1topress & s.A1M=retract) & s.a1ext=retracted : 1; --RT4d
     1 : s.pl;                                                      --default
    esac;


---------------------------------------------------------------------
---------------------------------------------------------------------
MODULE Press (s)

ASSIGN

  next(s.PM):=
    case
     (s.botPosP & s.PM=idle) & !s.pl : up;               -- PT1
     (!s.pl & s.PM=up) & s.midPosP : idle;   -- PT2
     (s.midPosP & s.PM=idle) & s.pl : up;                  -- PT3
     (s.pl & s.PM=up) & s.topPosP : idle;      -- PT4    
     (s.topPosP & s.PM=idle) & s.fc : down;              -- PT5
     s.PM=down & s.botPosP : idle;   -- PT6   
     1 : s.PM;
    esac;

--------------------------------------------------------------------
---------------------------------------------------------------------
MODULE DepositBelt (s)

ASSIGN

  next(s.crit):=
    case
     (s.DBM=run & !s.crit) & s.pbl : 1;                 -- BT1
     (s.DBM=run & s.crit) & !s.pbl : 0;            -- BT2
     1 : s.crit;
    esac;

   next(s.DBM):=
     case
      (s.DBM=run & s.crit) & !s.pbl : idle;        -- BT2
      (s.DBM=idle) & !s.pbe : run;               -- BT3
      1 : s.DBM;
     esac;

--------------------------------------------------------------------
---------------------------------------------------------------------
MODULE Crane (s)

ASSIGN

  next(s.CMag):=
    case
     (s.gob & s.gvp=ovb & s.CHM=idle & s.CVM=idle & s.CMag=off) & s.pbe : on; -- CT1
      s.CVM=down & s.gvp=ovf & s.gof : off;              -- CT6     
     1 : s.CMag;
    esac;

  next(s.CVM):=
    case
     s.CVM=idle & s.gvp=ovb & s.CMag=on : up;            -- CT2
     s.CVM=up & s.gvp=sd : idle;                         -- CT3
     (s.gof & s.gvp=sd & s.CHM=idle & s.CVM=idle & s.CMag=on) & s.ff : down; -- CT5
     s.CVM=down & s.gvp=ovf & s.gof : idle;              -- CT6
     s.CHM=todepbelt & s.gob : down;                     -- CT8
     s.gob & s.CVM=down & s.gvp=ovb : idle;              -- CT9
     1 : s.CVM;
    esac;

  next(s.CHM):=
    case
     s.CVM=up & s.gvp=sd : tofeedbelt;                   -- CT3
     s.CHM=tofeedbelt & s.gof : idle;                    -- CT4
     s.CVM=idle & s.gvp=ovf & s.gof & 
            s.CHM=idle & s.CMag=off : todepbelt;         -- CT7
     s.CHM=todepbelt & s.gob : idle;                     -- CT8
     1 : s.CHM;
    esac;

--------------------------------------------------------------------
---------------------------------------------------------------------
MODULE Communication (s)

ASSIGN

   next(s.tl):=
    case
     (s.angle=arm1totable & s.A1M=retract) & s.a1ext=retracted : 0;  -- RT4a
     (s.FBM=on & s.deliv) & !s.pfl : 1;                              -- FT3
     1 : s.tl;                                                   -- default
    esac;

  next(s.brl):=
    case
     s.CVM=up & s.gvp=sd : 1;                                       -- CT3
     (s.angle=arm2todepbelt & s.A2M=retract) & s.a2ext=retracted : 0; -- RT4c
     1 : s.brl;                                                   -- default
    esac;

  next(s.pbe):=
    case
     s.CVM=up & s.gvp=sd : 0;                                 -- CT3
     (s.DBM=run & s.crit) & !s.pbl : 1;                         -- BT2
      1 : s.pbe;                                            -- default
     esac;

   next(s.ff):=
     case
      (s.FBM=on & !s.deliv) & s.pfl : 1;                          -- FT1
      s.CVM=idle & s.gvp=ovf & s.gof & 
                 s.CHM=idle & s.CMag=off : 0;                   -- CT7
      1 : s.ff;                                               -- default
     esac;


--------------------------------------------------------------------
---------------------------------------------------------------------
MODULE Sensor (s)


ASSIGN

---FeedBelt-------------------------------------------------------------

 next(s.pfl) :=
  case
    s.FBM=on & !s.deliv & !s.ff  : 1;
    s.FBM=on & s.deliv   : 0;
    1 : s.pfl;
  esac;


---ERT------------------------------------------------------------------

 
 next(s.topPos) :=
  case
    s.TEM=up : 1;
    s.TEM=down : 0;
    1 : s.topPos;
  esac;

  next(s.botPos) := 
  case
    s.TEM=down : 1;
    s.TEM=up : 0;
    1 : s.botPos;
  esac;

  next(s.minRot) :=
  case
    s.TRM=counterclockwise : 1;
    s.TRM=clockwise : 0;
    1 : s.minRot;
  esac;

  next(s.maxRot) :=
  case
    s.TRM=clockwise : 1;
    s.TRM=counterclockwise : 0;
    1 : s.maxRot;
  esac;

----ROB-----------------------------------------------------------------

 next(s.a1ext) :=
  case
    s.A1M=extend & s.angle=arm1totable : ot;
    s.A1M=extend & s.angle=arm1topress : a1ip;
    s.A1M=retract : retracted;
    1 : s.a1ext;
  esac;

 next(s.a2ext) :=
  case
    s.A2M=extend & s.angle=arm2topress : a2ip;
    s.A2M=extend & s.angle=arm2todepbelt : ob;
    s.A2M=retract : retracted;
    1 : s.a2ext;
  esac;

 next(s.angle) :=
  case
    s.angle=arm1totable   & s.RRM=counterclock &
                     s.angle_status=arm1stoppedattable : arm2topress;
    s.angle=arm2topress   & s.RRM=counterclock & 
                     s.angle_status=arm2stoppedatpress : arm2todepbelt;
    s.angle=arm2todepbelt & s.RRM=counterclock &
                     s.angle_status=arm2stoppedatbelt : arm1topress;
    s.angle=arm1topress   & s.RRM=clockwise &
                     s.angle_status=arm1stoppedatpress : arm1totable;
    1 : s.angle;
  esac;

 next(s.angle_status) :=
  case
    s.angle=arm1totable   & s.RRM=idle : arm1stoppedattable;
    s.angle=arm2topress   & s.RRM=idle : arm2stoppedatpress;
    s.angle=arm2todepbelt & s.RRM=idle : arm2stoppedatbelt;
    s.angle=arm1topress   & s.RRM=idle : arm1stoppedatpress;
    1 : s.angle_status;
  esac;

----PR-----------------------------------------------------------------

 next(s.topPosP) :=
  case
    s.topPosP & s.PM=down : 0;
    s.midPosP & s.PM=up & s.press_status=pressatmid : 1;
    1 : s.topPosP;
  esac;

 next(s.midPosP) :=
  case
    s.botPosP & s.PM=up   : 1;
    s.midPosP & s.PM=up & s.press_status=pressatmid : 0;
    1 : s.midPosP;
  esac;

 next(s.botPosP) :=
  case
    s.botPosP & s.PM=up : 0;
    s.topPosP & s.PM=down : 1;
    1 : s.botPosP;
  esac;

 next(s.fc) :=
  case
    s.topPosP & s.PM=idle & s.pl : 1;
    !s.pl : 0;
    1 : s.fc;
  esac;

 
 next(s.press_status) :=
  case
    s.topPosP & s.PM=idle : pressattop;
    s.midPosP & s.PM=idle : pressatmid;
    s.botPosP & s.PM=idle : pressatbot;
    1 : s.press_status;
  esac;



----DB-----------------------------------------------------------------

 next(s.pbl) :=
  case
    s.DBM=run & !s.brl & !s.pbl : 1;
    s.DBM=run & s.crit & s.pbl : 0;
    1 : s.pbl;
  esac;



----CR-----------------------------------------------------------------

 next(s.gob) :=
  case
    s.CHM=todepbelt : 1;
    s.CHM=tofeedbelt : 0;
    1 : s.gob;
  esac;

 next(s.gof) :=
  case
    s.CHM=tofeedbelt : 1;
    s.CHM=todepbelt : 0;
    1 : s.gof;
  esac;

 next(s.gvp) :=
  case
    s.gvp=ovb & s.gripper_status=gripperstoppedat_ovb & s.CVM=up   : sd;
    s.gvp=sd  & s.gripper_status=gripperstoppedat_sd & s.CVM=down : ovf;
    s.gvp=ovf & s.gripper_status=gripperstoppedat_ovf & s.CVM=down : ovb;
    s.gvp=ovf & s.gripper_status=gripperstoppedat_ovf & s.CVM=up   : sd;
    1 : s.gvp;
  esac;

 next(s.gripper_status) := 
  case
    s.CVM=idle & s.gvp=ovb : gripperstoppedat_ovb;
    s.CVM=idle & s.gvp=ovf : gripperstoppedat_ovf;
    s.CVM=idle & s.gvp=sd  : gripperstoppedat_sd;
    1 : s.gripper_status;
  esac;

---------------------------------------------------------------------

MODULE main
VAR
	s    : state;
	FB   :  FeedBelt(s);
	ERT  :  ERTable(s);
	RB   :  Robot(s);
	PR   :  Press(s);
	DB   :  DepositBelt(s);
	CR   :  Crane(s);
        
	SEN  :  Sensor (s);
	COM  :  Communication (s);



---------------------------------------------------------------------


-- p4neg.ltl
LTLSPEC !(((((((((((((((((1)U((s.FBM=on)&(!(s.deliv))))U((s.FBM=on)&(s.deliv)))U((s.botPos)&((s.minRot)&((s.TEM=idle)&(s.TRM=idle)))))U((s.topPos)&((s.maxRot)&((s.TEM=idle)&(s.TRM=idle)))))U((s.angle=arm1totable)&((s.A1M=extend)&(s.a1ext=ot))))U((s.angle=arm1topress)&((s.A1M=extend)&(s.a1ext=a1ip))))U((s.midPosP)&(s.PM=idle)))U((s.topPosP)&(s.PM=idle)))U((s.botPosP)&(s.PM=idle)))U((s.angle=arm2topress)&((s.A2M=extend)&(s.a2ext=a2ip))))U((s.angle=arm2todepbelt)&((s.A2M=extend)&(s.a2ext=ob))))U((s.DBM=run)&(!(s.crit))))U((s.DBM=run)&(s.crit)))U((s.gob)&((s.gvp=ovb)&((s.CHM=idle)&((s.CVM=idle)&((s.CMag=off)&(s.pbe)))))))U((s.CVM=down)&((s.gvp=ovf)&(s.gof))))U((s.FBM=on)&(!(s.deliv))))
-- p1neg.ltl
LTLSPEC !(G(F(((!(s.CHM=idle))|(!(s.CVM=idle)))&(Y(O((!(s.DBM=idle))&(Y(O(((!(s.A1M=idle))|(!(s.A2M=idle)))&(Y(O((!(s.PM=idle))&(Y(O(((!(s.A1M=idle))|(!(s.A2M=idle)))&(Y(O(((!(s.TEM=idle))|(!(s.TRM=idle)))&(Y(O(s.FBM=on)))))))))))))))))))))
-- p0.ltl
LTLSPEC G(F(((!(s.CHM=idle))|(!(s.CVM=idle)))&(O((!(s.DBM=idle))&(O(((!(s.A1M=idle))|(!(s.A2M=idle)))&(O((!(s.PM=idle))&(O(((!(s.A1M=idle))|(!(s.A2M=idle)))&(O(((!(s.TEM=idle))|(!(s.TRM=idle)))&(O(s.FBM=on))))))))))))))
-- p1.ltl
LTLSPEC G(F(((!(s.CHM=idle))|(!(s.CVM=idle)))&(Y(O((!(s.DBM=idle))&(Y(O(((!(s.A1M=idle))|(!(s.A2M=idle)))&(Y(O((!(s.PM=idle))&(Y(O(((!(s.A1M=idle))|(!(s.A2M=idle)))&(Y(O(((!(s.TEM=idle))|(!(s.TRM=idle)))&(Y(O(s.FBM=on))))))))))))))))))))
-- p2.ltl
LTLSPEC G(F(((!(s.CHM=idle))|(!(s.CVM=idle)))&(O((!(s.DBM=idle))&(Y(O(((!(s.A1M=idle))|(!(s.A2M=idle)))&(O((!(s.PM=idle))&(Y(O(((!(s.A1M=idle))|(!(s.A2M=idle)))&(Y(O(((!(s.TEM=idle))|(!(s.TRM=idle)))&(Y(O(s.FBM=on))))))))))))))))))
-- p3.ltl
LTLSPEC (((((((((((((1)U((s.FBM=on)&(!(s.deliv))))U((s.FBM=on)&(s.deliv)))U((s.botPos)&((s.minRot)&((s.TEM=idle)&(s.TRM=idle)))))U((s.topPos)&((s.maxRot)&((s.TEM=idle)&(s.TRM=idle)))))U((s.angle=arm1totable)&((s.A1M=extend)&(s.a1ext=ot))))U((s.angle=arm1topress)&((s.A1M=extend)&(s.a1ext=a1ip))))U((s.midPosP)&(s.PM=idle)))U((s.topPosP)&(s.PM=idle)))U((s.botPosP)&(s.PM=idle)))U((s.angle=arm2topress)&((s.A2M=extend)&(s.a2ext=a2ip))))U((s.angle=arm2todepbelt)&((s.A2M=extend)&(s.a2ext=ob))))U((s.DBM=run)&(!(s.crit))))U((s.DBM=run)&(s.crit))
-- p4.ltl
LTLSPEC ((((((((((((((((1)U((s.FBM=on)&(!(s.deliv))))U((s.FBM=on)&(s.deliv)))U((s.botPos)&((s.minRot)&((s.TEM=idle)&(s.TRM=idle)))))U((s.topPos)&((s.maxRot)&((s.TEM=idle)&(s.TRM=idle)))))U((s.angle=arm1totable)&((s.A1M=extend)&(s.a1ext=ot))))U((s.angle=arm1topress)&((s.A1M=extend)&(s.a1ext=a1ip))))U((s.midPosP)&(s.PM=idle)))U((s.topPosP)&(s.PM=idle)))U((s.botPosP)&(s.PM=idle)))U((s.angle=arm2topress)&((s.A2M=extend)&(s.a2ext=a2ip))))U((s.angle=arm2todepbelt)&((s.A2M=extend)&(s.a2ext=ob))))U((s.DBM=run)&(!(s.crit))))U((s.DBM=run)&(s.crit)))U((s.gob)&((s.gvp=ovb)&((s.CHM=idle)&((s.CVM=idle)&((s.CMag=off)&(s.pbe)))))))U((s.CVM=down)&((s.gvp=ovf)&(s.gof))))U((s.FBM=on)&(!(s.deliv)))
-- p3neg.ltl
LTLSPEC !((((((((((((((1)U((s.FBM=on)&(!(s.deliv))))U((s.FBM=on)&(s.deliv)))U((s.botPos)&((s.minRot)&((s.TEM=idle)&(s.TRM=idle)))))U((s.topPos)&((s.maxRot)&((s.TEM=idle)&(s.TRM=idle)))))U((s.angle=arm1totable)&((s.A1M=extend)&(s.a1ext=ot))))U((s.angle=arm1topress)&((s.A1M=extend)&(s.a1ext=a1ip))))U((s.midPosP)&(s.PM=idle)))U((s.topPosP)&(s.PM=idle)))U((s.botPosP)&(s.PM=idle)))U((s.angle=arm2topress)&((s.A2M=extend)&(s.a2ext=a2ip))))U((s.angle=arm2todepbelt)&((s.A2M=extend)&(s.a2ext=ob))))U((s.DBM=run)&(!(s.crit))))U((s.DBM=run)&(s.crit)))
-- p0neg.ltl
LTLSPEC !(G(F(((!(s.CHM=idle))|(!(s.CVM=idle)))&(O((!(s.DBM=idle))&(O(((!(s.A1M=idle))|(!(s.A2M=idle)))&(O((!(s.PM=idle))&(O(((!(s.A1M=idle))|(!(s.A2M=idle)))&(O(((!(s.TEM=idle))|(!(s.TRM=idle)))&(O(s.FBM=on)))))))))))))))
-- p2neg.ltl
LTLSPEC !(G(F(((!(s.CHM=idle))|(!(s.CVM=idle)))&(O((!(s.DBM=idle))&(Y(O(((!(s.A1M=idle))|(!(s.A2M=idle)))&(O((!(s.PM=idle))&(Y(O(((!(s.A1M=idle))|(!(s.A2M=idle)))&(Y(O(((!(s.TEM=idle))|(!(s.TRM=idle)))&(Y(O(s.FBM=on)))))))))))))))))))
